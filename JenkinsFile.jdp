pipeline {
    agent none
    stages {
        stage('Build All') {
            //failFast true
            parallel {
                stage('Back-end') {
                    agent {
                        docker { image 'maven:3-alpine' }
                    }
                    steps {
                        sh 'mvn --version'
                        sh 'touch "backend.jar"'
                        sh 'ls -l'
                    }
                    post {
                        success {
                            archiveArtifacts 'backend.jar'
                        }
                    }
                }
                stage('Front-end') {
                    agent {
                        docker { image 'node:7-alpine' }
                    }
                    steps {
                        sh 'node --version'
                        sh 'touch "front.jar"'
                        sh 'ls -l'
                    }
                    post {
                        success {
                            archiveArtifacts 'front.jar'
                        }
                    }
                }
                stage('Login'){
                    agent {
                        docker { image 'ubuntu' }
                    }
                    steps{
                        withCredentials([usernameColonPassword(credentialsId: 'mylogin', variable: 'USERPASS')]) {
                        sh '''
                        set +x
                        curl -u "$USERPASS" https://lingaro.com/ > output
                        '''
                        }
                    }
                }
            }
        }
        stage('Test on All Supported') {
            parallel {
                //stage('SonarQube analysis') {
                    // requires SonarQube Scanner 2.8+
                //    def scannerHome = tool 'SonarQube Scanner 2.8';
                //    withSonarQubeEnv('My SonarQube Server') {
                //        sh "${scannerHome}/bin/sonar-scanner"
                //    }
                //}
                stage('RobotFramework E2E Tests') {
                    agent {
                        docker { image 'docker:latest' }
                    }
                    steps {
                        sh "docker-compose --version"
                    }
                }
                stage('Firefox') {
                    agent {
                        docker { image 'selenium/standalone-firefox-debug' }
                    }
                    steps {
                        echo "firefox debug standalone"
                    }
                }
                stage('Chrome') {
                    agent {
                        docker { image 'selenium/standalone-chrome' }
                    }
                    steps {
                        echo "Chrome standalone"
                    }
                }
                stage('other') {
                    agent none
                    steps{
                        script {
                            def browsers = ['ie8', 'ie9','ie10']
                            for (int i = 0; i < browsers.size(); ++i) {
                                echo "Testing the ${browsers[i]} browser using some provider ex. source lab"
                            }
                        }
                    }
                }
            }
        }
        stage('Example IF') {
            //.BRANCH_NAME != 'master') {
            steps{
                echo 'I only execute on the master branch'
            }
            //} else {
            //    echo 'I execute elsewhere'
            //    try {
            //        sh 'exit 1'
            //    }
            //    catch (exc) {
            //        echo 'Something failed, I should sound the klaxons!'
            //    }
            //}
        }
        stage('Do we Push') {
            //when {
                //branch 'production'
                //environment name: 'DEPLOY_TO', value: 'production'
            //}
            input {
                message "Should we push to prod?"
                ok "Yes, we should."
                submitter "koperski.m"
                parameters {
                    string(name: 'PERSON', defaultValue: 'NoOne', description: 'Who should I say hello to?')
                }
            }
            agent {
                docker { image 'docker:latest' }
            }
            steps {
                echo "Hello, ${PERSON}, nice to meet you."
                sh 'docker info'
                sh 'ls -l'
            }
        }
    }
}
